// Instructor-provided testing program.

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

/**
 * Class GiftExchangeMain is the main client program for
 * gift exchange management. It reads names from a file
 * gifts.txt, shuffles them, and uses them to start the
 * exchange. The user is asked for the next action (open or
 * steal, followed by the name of a person to steal from)
 * until the exchange is over.
 */
public class GiftExchangeMain {
    /** input file name from which to read data */
    public static final String INPUT_FILENAME = "/Users/manchindsingh/IdeaProjects/Assignment2/src/gifts.txt";

    /**
     * true for different results every run; false for
     * predictable results
     */
    public static final boolean RANDOM = false;

    /**
     * If not random, use this value to guide the sequence
     * of numbers that will be generated by the Random
     * object.
     */
    public static final int SEED = 42;

    public static void main(String[] args)
            throws FileNotFoundException {
        // read names into Sets to eliminate duplicates
        File inputFile = new File(INPUT_FILENAME);
        if (!inputFile.canRead()) {
            System.out.println(
                    "Required input file not found; exiting.\n"
                            + inputFile.getAbsolutePath());
            System.exit(1);
        }
        Scanner input = new Scanner(inputFile);

        Set<String> names = new TreeSet<>(
                String.CASE_INSENSITIVE_ORDER);
        Set<String> gifts = new TreeSet<>(
                String.CASE_INSENSITIVE_ORDER);
        while (input.hasNextLine()) {
            String[] parts = input.nextLine().split(",");
            add(names, parts[0]);
            add(gifts, parts[1]);
        }
        input.close();

        Random rand = RANDOM ? new Random()
                : new Random(SEED);

        // transfer to an ArrayList, shuffle and build a
        // GiftExchangeManager
        List<String> nameList = getRandomList(names, rand);
        List<String> giftList = getRandomList(gifts, rand);
        GiftExchangeManager manager = new GiftExchangeManager(
                nameList);

        // prompt the user for actions until the exchange is
        // over
        Scanner console = new Scanner(System.in);
        while (!manager.isGameOver()) {
            oneGift(console, manager, giftList);
        }

        // report who received what gifts
        System.out.println(
                "Final gift results are as follows:");
        manager.printAlreadyChosen(System.out);
    }

    /**
     * Handles the details of opening/stealing one gift.
     * Shows the current participant list and those who have
     * already chosen gifts to the user, prompts for a
     * choice (open or steal), asks for a name if the choice
     * is to steal and records the event.
     */
    public static void oneGift(Scanner console,
                               GiftExchangeManager manager,
                               List<String> giftList) {
        // print both linked lists
        System.out.println("Participants remaining:");
        manager.printRemainingParticipants(System.out);
        System.out.println();
        System.out.println("Already chosen gifts:");
        manager.printAlreadyChosen(System.out);

        // prompt for next action
        System.out.println();
        System.out.print("open or steal? ");
        String choice = console.nextLine().trim()
                .toLowerCase();
        if (choice.startsWith("o")) {
            manager.openGift(
                    giftList.remove(giftList.size() - 1));
        } else if (choice.startsWith("s")) {
            System.out.println();
            System.out.print("steal from whom? ");
            String name = console.nextLine().trim();

            // steal a gift, if possible
            if (manager.alreadyChosenContains(name)) {
                manager.stealFrom(name);
            } else if (!manager
                    .remainingParticipantsContains(name)) {
                System.out.println("Unknown person.");
            } else {
                System.out.println(name
                        + " hasn't chosen a gift yet.");
            }
        } else {
            System.out.println(
                    "The next participant must either open "
                            + "a new gift or steal one from "
                            + "someone else");
        }

        System.out.println();
    }

    private static List<String> getRandomList(
            Set<String> set, Random rand) {
        List<String> nameList = new ArrayList<>(set);
        Collections.shuffle(nameList, rand);
        return nameList;
    }

    private static void add(Set<String> names, String str) {
        String name = str.trim().intern();
        if (name.length() > 0) {
            names.add(name);
        }
    }
}

